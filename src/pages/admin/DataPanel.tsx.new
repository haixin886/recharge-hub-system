import { useEffect, useState, useCallback } from "react";
import AdminLayout from "@/components/AdminLayout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowUpRight, RefreshCw } from "lucide-react";
import { getDataPanelStats } from "@/services/dataPanelService";
import { getMockDataPanelStats } from "@/services/mockDataService";
import { DataPanelStats, TimeRangeType, DateRangeParams } from "@/types/dataModels";
import { toast } from "@/components/ui/use-toast";

// 导入需要的组件
import SalesTrendChart from "../../components/admin/dataPanel/SalesTrendChart";
import PaymentMethodChart from "../../components/admin/dataPanel/PaymentMethodChart";
import CarrierStatsChart from "../../components/admin/dataPanel/CarrierStatsChart";

/**
 * 数据管理面板组件 - 完全重写版本
 */
const DataPanel = () => {
  // 状态管理
  const [stats, setStats] = useState<DataPanelStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [timeRange, setTimeRange] = useState<TimeRangeType>("today");
  const [customRange, setCustomRange] = useState<DateRangeParams>({
    startDate: new Date(new Date().setDate(new Date().getDate() - 30)).toISOString(),
    endDate: new Date().toISOString()
  });

  const fetchStats = useCallback(async () => {
    setIsLoading(true);
    try {
      // 尝试从数据库获取数据
      const data = await getDataPanelStats(timeRange, customRange);
      setStats(data);
    } catch (error) {
      console.error('Failed to fetch stats from database:', error);
      // 使用模拟数据作为备份
      try {
        console.log('Using mock data as fallback');
        const mockData = getMockDataPanelStats(timeRange);
        setStats(mockData);
      } catch (mockError) {
        console.error('Failed to generate mock data:', mockError);
        toast({
          title: '数据加载失败',
          description: '无法加载统计数据，请稍后再试。',
          variant: 'destructive',
        });
      }
    } finally {
      setIsLoading(false);
    }
  }, [timeRange, customRange]);

  useEffect(() => {
    fetchStats();
  }, [fetchStats]);

  const handleTimeRangeChange = (range: TimeRangeType) => {
    setTimeRange(range);
  };

  const getTimeRangeLabel = () => {
    switch (timeRange) {
      case 'today':
        return '今日数据';
      case 'week':
        return '本周数据';
      case 'month':
        return '本月数据';
      case 'custom':
        return `${customRange?.startDate?.substring(0, 10)} 至 ${customRange?.endDate?.substring(0, 10)}`;
      default:
        return '今日数据';
    }
  };

  const renderSummaryCard = (title: string, value: number | string, subtitle: string, trend?: number) => {
    return (
      <Card className="flex-1">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          <ArrowUpRight className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{value}</div>
          <p className="text-xs text-muted-foreground">{subtitle}</p>
          {trend !== undefined && (
            <div className="mt-2 flex items-center text-xs">
              <span className={`mr-1 ${trend >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                {trend >= 0 ? '+' : ''}{trend}%
              </span>
              <span className="text-muted-foreground">相比上期</span>
            </div>
          )}
        </CardContent>
      </Card>
    );
  };

  const formatCurrency = (value: number) => {
    return `¥${value.toLocaleString('zh-CN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  // 渲染选项卡
  const renderTabs = () => {
    const tabs = ['today', 'week', 'month', 'custom'];

    return (
      <div className="mb-6 flex gap-2 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab}
            className={`
              rounded-md px-3 py-2 text-sm font-medium 
              ${timeRange === tab ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground hover:bg-muted/80'}
            `}
            onClick={() => handleTimeRangeChange(tab as TimeRangeType)}
          >
            {tab === 'today' && '今日'}
            {tab === 'week' && '本周'}
            {tab === 'month' && '本月'}
            {tab === 'custom' && '自定义'}
          </button>
        ))}
        <button
          className="ml-auto flex items-center gap-1 rounded-md bg-muted px-3 py-2 text-sm font-medium text-muted-foreground hover:bg-muted/80"
          onClick={() => fetchStats()}
        >
          <RefreshCw className="h-4 w-4" />
          刷新
        </button>
      </div>
    );
  };

  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-6">
        <h1 className="mb-6 text-3xl font-bold">数据统计面板</h1>
        
        {/* 时间范围选择器 */}
        {renderTabs()}
        
        {isLoading ? (
          <div className="flex h-96 items-center justify-center">
            <div className="flex flex-col items-center">
              <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
              <p className="mt-4 text-sm text-muted-foreground">加载数据中...</p>
            </div>
          </div>
        ) : !stats ? (
          <div className="flex h-96 items-center justify-center">
            <p className="text-muted-foreground">暂无数据</p>
          </div>
        ) : (
          <>
            {/* 顶部摘要卡片 */}
            <div className="mb-6 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
              {stats.totalSales !== undefined && stats.totalSales > 0 && 
                renderSummaryCard(
                  '总销售额',
                  formatCurrency(stats.totalSales),
                  getTimeRangeLabel(),
                  10
                )
              }
              {stats.totalOrders !== undefined && stats.totalOrders > 0 && 
                renderSummaryCard(
                  '总订单数',
                  stats.totalOrders.toString(),
                  getTimeRangeLabel(),
                  8
                )
              }
              {stats.newUsers !== undefined && stats.newUsers > 0 && 
                renderSummaryCard(
                  '用户数量',
                  stats.newUsers.toString(),
                  getTimeRangeLabel(),
                  5
                )
              }
              {stats.netRevenue !== undefined && stats.netRevenue > 0 && 
                renderSummaryCard(
                  '净收入',
                  formatCurrency(stats.netRevenue),
                  getTimeRangeLabel(),
                  12
                )
              }
            </div>
            
            {/* 数据图表部分 - 三栏布局 */}
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
              {/* 第一栏: 销售趋势 */}
              <Card className="col-span-3 lg:col-span-1">
                <CardHeader>
                  <CardTitle>销售趋势</CardTitle>
                </CardHeader>
                <CardContent>
                  {stats.salesTrend && stats.salesTrend.length > 0 && (
                    <SalesTrendChart salesTrend={stats.salesTrend} />
                  )}
                </CardContent>
              </Card>
              
              {/* 第二栏: 支付方式分布 */}
              <Card className="col-span-3 lg:col-span-1">
                <CardHeader>
                  <CardTitle>支付方式分布</CardTitle>
                </CardHeader>
                <CardContent>
                  {stats.paymentMethodStats && stats.paymentMethodStats.length > 0 && (
                    <PaymentMethodChart paymentMethods={stats.paymentMethodStats} />
                  )}
                </CardContent>
              </Card>
              
              {/* 第三栏: 运营商统计 */}
              <Card className="col-span-3 lg:col-span-1">
                <CardHeader>
                  <CardTitle>运营商统计</CardTitle>
                </CardHeader>
                <CardContent>
                  {stats.carrierStats && stats.carrierStats.length > 0 && (
                    <CarrierStatsChart carrierStats={stats.carrierStats} />
                  )}
                </CardContent>
              </Card>
            </div>
          </>
        )}
      </div>
    </AdminLayout>
  );
};

export default DataPanel;
